/**
 * Salve mundi API
 * Salve mundi API documentation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ict@salvemundi.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ConfirmationDTO } from "../model/confirmationDTO";
import { LoginDTO } from "../model/loginDTO";
import { MeDTO } from "../model/meDTO";
import { RegisterDTO } from "../model/registerDTO";
import { User } from "../model/user";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class AuthorizationService {
    private basePath: string = 'http://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * confirmation
     * This call is used to activate an user. It will return an authorization cookie when succesful
     * @param confirmationDTO 
     
     */
    public authorizationConfirmationPost(confirmationDTO: ConfirmationDTO, observe?: 'body', headers?: Headers): Observable<User>;
    public authorizationConfirmationPost(confirmationDTO: ConfirmationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public authorizationConfirmationPost(confirmationDTO: ConfirmationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (confirmationDTO === null || confirmationDTO === undefined){
            throw new Error('Required parameter confirmationDTO was null or undefined when calling authorizationConfirmationPost.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.post(`${this.basePath}/authorization/confirmation`, confirmationDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * login
     * This call is used to login an user. It will return an authorization cookie when succesful
     * @param loginDTO 
     
     */
    public authorizationLoginPost(loginDTO: LoginDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public authorizationLoginPost(loginDTO: LoginDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public authorizationLoginPost(loginDTO: LoginDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (loginDTO === null || loginDTO === undefined){
            throw new Error('Required parameter loginDTO was null or undefined when calling authorizationLoginPost.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/authorization/login`, loginDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * me
     * This call is used to get the user from the FHICT api
     * @param token 
     
     */
    public authorizationMeGet(token: string, observe?: 'body', headers?: Headers): Observable<MeDTO>;
    public authorizationMeGet(token: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<MeDTO>>;
    public authorizationMeGet(token: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (token === null || token === undefined){
            throw new Error('Required parameter token was null or undefined when calling authorizationMeGet.');
        }

        let queryParameters: string[] = [];
        if (token !== undefined) {
            queryParameters.push("token="+encodeURIComponent(String(token)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MeDTO>> = this.httpClient.get(`${this.basePath}/authorization/me?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <MeDTO>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * register
     * This call is used to register an user
     * @param registerDTO 
     
     */
    public authorizationRegisterPost(registerDTO: RegisterDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public authorizationRegisterPost(registerDTO: RegisterDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public authorizationRegisterPost(registerDTO: RegisterDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (registerDTO === null || registerDTO === undefined){
            throw new Error('Required parameter registerDTO was null or undefined when calling authorizationRegisterPost.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/authorization/register`, registerDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
