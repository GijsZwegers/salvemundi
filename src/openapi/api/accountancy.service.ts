/**
 * Salve mundi API
 * Salve mundi API documentation
 *
 * The version of the OpenAPI document: 2.4.1-beta14
 * Contact: ict@salvemundi.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ActivationLinkDTO } from "../model/activationLinkDTO";
import { AddMutationDTO } from "../model/addMutationDTO";
import { BalanceDTO } from "../model/balanceDTO";
import { ImportMutationDTO } from "../model/importMutationDTO";
import { IncomeStatementDTO } from "../model/incomeStatementDTO";
import { Mutation } from "../model/mutation";
import { NotImportedMutationDTO } from "../model/notImportedMutationDTO";
import { SaveAuthorizationDTO } from "../model/saveAuthorizationDTO";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class AccountancyService {
    private basePath: string = 'http://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Activates the Accountancy api
     * Activates the accountancy api using a Authorization code from the rabo api
     * @param saveAuthorizationDTO 
     
     */
    public activateApi(saveAuthorizationDTO: SaveAuthorizationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public activateApi(saveAuthorizationDTO: SaveAuthorizationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public activateApi(saveAuthorizationDTO: SaveAuthorizationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (saveAuthorizationDTO === null || saveAuthorizationDTO === undefined){
            throw new Error('Required parameter saveAuthorizationDTO was null or undefined when calling activateApi.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/accountancy/activate`, saveAuthorizationDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Adds a mutation
     * 
     * @param addMutationDTO 
     
     */
    public addMutation(addMutationDTO: AddMutationDTO, observe?: 'body', headers?: Headers): Observable<Mutation>;
    public addMutation(addMutationDTO: AddMutationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<Mutation>>;
    public addMutation(addMutationDTO: AddMutationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (addMutationDTO === null || addMutationDTO === undefined){
            throw new Error('Required parameter addMutationDTO was null or undefined when calling addMutation.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Mutation>> = this.httpClient.post(`${this.basePath}/accountancy/mutation`, addMutationDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Mutation>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get the activation link from the rabobank api
     * 
     
     */
    public getActivationLink(observe?: 'body', headers?: Headers): Observable<ActivationLinkDTO>;
    public getActivationLink(observe?: 'response', headers?: Headers): Observable<HttpResponse<ActivationLinkDTO>>;
    public getActivationLink(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ActivationLinkDTO>> = this.httpClient.get(`${this.basePath}/accountancy/activate`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <ActivationLinkDTO>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Gets the balance
     * 
     * @param till 
     * @param name 
     
     */
    public getBalance(till: string, name?: string, observe?: 'body', headers?: Headers): Observable<Array<BalanceDTO>>;
    public getBalance(till: string, name?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<BalanceDTO>>>;
    public getBalance(till: string, name?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (till === null || till === undefined){
            throw new Error('Required parameter till was null or undefined when calling getBalance.');
        }

        let queryParameters: string[] = [];
        if (till !== undefined) {
            queryParameters.push("till="+encodeURIComponent(String(till)));
        }
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<BalanceDTO>>> = this.httpClient.get(`${this.basePath}/accountancy/balance?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Array<BalanceDTO>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Gets the income statements
     * 
     * @param till 
     * @param name 
     
     */
    public getIncomeStatements(till: string, name?: string, observe?: 'body', headers?: Headers): Observable<Array<IncomeStatementDTO>>;
    public getIncomeStatements(till: string, name?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<IncomeStatementDTO>>>;
    public getIncomeStatements(till: string, name?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (till === null || till === undefined){
            throw new Error('Required parameter till was null or undefined when calling getIncomeStatements.');
        }

        let queryParameters: string[] = [];
        if (till !== undefined) {
            queryParameters.push("till="+encodeURIComponent(String(till)));
        }
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<IncomeStatementDTO>>> = this.httpClient.get(`${this.basePath}/accountancy/incomeStatement?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Array<IncomeStatementDTO>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Gets the mutations that are not imported yet
     * 
     
     */
    public getNotImportedMutations(observe?: 'body', headers?: Headers): Observable<Array<NotImportedMutationDTO>>;
    public getNotImportedMutations(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotImportedMutationDTO>>>;
    public getNotImportedMutations(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<NotImportedMutationDTO>>> = this.httpClient.get(`${this.basePath}/accountancy/import`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Array<NotImportedMutationDTO>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Imports a mutation
     * 
     * @param id 
     * @param importMutationDTO 
     
     */
    public importMutation(id: number, importMutationDTO: ImportMutationDTO, observe?: 'body', headers?: Headers): Observable<any>;
    public importMutation(id: number, importMutationDTO: ImportMutationDTO, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public importMutation(id: number, importMutationDTO: ImportMutationDTO, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling importMutation.');
        }

        if (importMutationDTO === null || importMutationDTO === undefined){
            throw new Error('Required parameter importMutationDTO was null or undefined when calling importMutation.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/accountancy/import/${encodeURIComponent(String(id))}`, importMutationDTO , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
