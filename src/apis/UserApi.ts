// tslint:disable
/**
 * Salve mundi API
 * Salve mundi API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfRequired, encodeURI } from '../runtime';
import {
    ShortedUserDto,
    UpdateUserDto,
    User,
} from '../models';

export interface UserGetRequest {
    take: number;
    skip: number;
}

export interface UserIdDeleteRequest {
    id: number;
}

export interface UserIdGetRequest {
    id: number;
}

export interface UserPutRequest {
    updateUserDto: UpdateUserDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {

    /**
     * This call is used to get a summary of all the users
     * getAll
     */
    userGet = (requestParameters: UserGetRequest): Observable<Array<ShortedUserDto>> => {
        throwIfRequired(requestParameters, 'take', 'userGet');
        throwIfRequired(requestParameters, 'skip', 'userGet');

        return this.request<Array<ShortedUserDto>>({
            path: '/user'.replace('{take}', encodeURI(requestParameters.take)).replace('{skip}', encodeURI(requestParameters.skip)),
            method: 'GET',
        });
    };

    /**
     * This call is used to delete a user
     * delete
     */
    userIdDelete = (requestParameters: UserIdDeleteRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'id', 'userIdDelete');

        return this.request<void>({
            path: '/user/{id}'.replace('{id}', encodeURI(requestParameters.id)),
            method: 'DELETE',
        });
    };

    /**
     * This call is used to get a specific user
     * getOne
     */
    userIdGet = (requestParameters: UserIdGetRequest): Observable<User> => {
        throwIfRequired(requestParameters, 'id', 'userIdGet');

        return this.request<User>({
            path: '/user/{id}'.replace('{id}', encodeURI(requestParameters.id)),
            method: 'GET',
        });
    };

    /**
     * This call is used to get the current user
     * me
     */
    userMeGet = (): Observable<User> => {
        return this.request<User>({
            path: '/user/me',
            method: 'GET',
        });
    };

    /**
     * This call is used to update a user
     * update
     */
    userPut = (requestParameters: UserPutRequest): Observable<User> => {
        throwIfRequired(requestParameters, 'updateUserDto', 'userPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<User>({
            path: '/user',
            method: 'PUT',
            headers,
            body: requestParameters.updateUserDto,
        });
    };

}
