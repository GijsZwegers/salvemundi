// tslint:disable
/**
 * Salve mundi API
 * Salve mundi API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfRequired } from '../runtime';
import {
    LoginDTO,
    RegisterDTO,
    User,
} from '../models';

export interface AuthorizationLoginPostRequest {
    loginDTO: LoginDTO;
}

export interface AuthorizationMeGetRequest {
    token: string;
}

export interface AuthorizationRegisterPostRequest {
    registerDTO: RegisterDTO;
}

/**
 * no description
 */
export class AuthorizationApi extends BaseAPI {

    /**
     * This call is used to login a user. It will return an authorization cookie when succesful
     * login
     */
    authorizationLoginPost = (requestParameters: AuthorizationLoginPostRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'loginDTO', 'authorizationLoginPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/authorization/login',
            method: 'POST',
            headers,
            body: requestParameters.loginDTO,
        });
    };

    /**
     * This call is used to get the user from the FHICT api
     * me
     */
    authorizationMeGet = (requestParameters: AuthorizationMeGetRequest): Observable<User> => {
        throwIfRequired(requestParameters, 'token', 'authorizationMeGet');

        const query: HttpQuery = {
            ...(requestParameters.token && { 'token': requestParameters.token }),
        };

        return this.request<User>({
            path: '/authorization/me',
            method: 'GET',
            query,
        });
    };

    /**
     * This call is used to register a user. It will return an authorization cookie when succesful
     * register
     */
    authorizationRegisterPost = (requestParameters: AuthorizationRegisterPostRequest): Observable<User> => {
        throwIfRequired(requestParameters, 'registerDTO', 'authorizationRegisterPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<User>({
            path: '/authorization/register',
            method: 'POST',
            headers,
            body: requestParameters.registerDTO,
        });
    };

}
