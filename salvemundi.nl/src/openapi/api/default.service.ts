/**
 * Salve mundi API
 * Salve mundi API documentation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ict@salvemundi.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";


import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class DefaultService {
    private basePath: string = 'http://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param createEventDto 
     
     */
    public eventsCreatePost(createEventDto: object, observe?: 'body', headers?: Headers): Observable<any>;
    public eventsCreatePost(createEventDto: object, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public eventsCreatePost(createEventDto: object, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (createEventDto === null || createEventDto === undefined){
            throw new Error('Required parameter createEventDto was null or undefined when calling eventsCreatePost.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/events/create`, createEventDto , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param eventSignupDto 
     
     */
    public eventsSignupPost(eventSignupDto: object, observe?: 'body', headers?: Headers): Observable<any>;
    public eventsSignupPost(eventSignupDto: object, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public eventsSignupPost(eventSignupDto: object, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (eventSignupDto === null || eventSignupDto === undefined){
            throw new Error('Required parameter eventSignupDto was null or undefined when calling eventsSignupPost.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/events/signup`, eventSignupDto , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     
     */
    public eventsUpdatePut(observe?: 'body', headers?: Headers): Observable<any>;
    public eventsUpdatePut(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public eventsUpdatePut(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/events/update`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     
     */
    public webhookMembershipPost(observe?: 'body', headers?: Headers): Observable<any>;
    public webhookMembershipPost(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public webhookMembershipPost(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/webhook/membership`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
